Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You may assume no duplicates in the array.

Here are few examples.
[1,3,5,6], 5 → 2
[1,3,5,6], 2 → 1
[1,3,5,6], 7 → 4
[1,3,5,6], 0 → 0


任何O（logN）或者 binary 的问题都要想到二分法
用这个模板找到相邻的两个数，不是前面就是后面这个，在比较可能的情况


public class Solution {
    public int searchInsert(int[] A, int target) {
      
       int head = 0;
       int end = A.length - 1;
       int mid = head + (end - head ) / 2;
       
       
       while(head + 1 < end){
           if(A[mid] == target || A[mid] > target){
               end = mid;
           }else{
               head = mid;
           }
           mid = head + (end - head ) / 2; 
       }
       
       if(A[head] >= target){
           return head;
       }else if(A[end] >= target){
           return end;
       }else{
           return end + 1;
        }
    }
}
