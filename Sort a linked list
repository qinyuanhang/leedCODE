Sort a linked list in O(n log n) time using constant space complexity.

用Nlog（N）来排序，这里用的是merge方法



public class Solution {
    public ListNode sortList(ListNode head) {
        if(head == null || head.next == null) return head;
        ListNode firstHalf = head;
        ListNode secondHalf =head;
        
        ListNode fast = head;
        ListNode slow = head;
        
        while(fast.next != null && fast.next.next != null ){这里就是找到中点，
            fast = fast.next.next;
            slow = slow.next;
        }
        secondHalf = slow.next;//!!!!注意这里找到的是中点的上一个，因为这个点的下一个节点要被设置成为空，否则会出现
        slow.next = null;  // ：12345和45两个链表，但是我们想要的是123 和 45，所以3后面的一个节点要被设置成为null
        
        ListNode leftList = null, rightList =null;
        if(firstHalf != secondHalf){
            leftList = sortList(firstHalf);这里是一个分治算法，分别分为两段list再sort他们
            rightList = sortList(secondHalf);
        }
        
       return mergeLists(leftList,rightList); 
        
        
    }
    
  这里就是一个merge two list的原题就可以，
    public ListNode mergeLists(ListNode left, ListNode right){
        if(left == null) return right;
        if(right == null) return left;
        
        ListNode dummy = new ListNode(-1);
        ListNode head = dummy;
        while(left != null && right != null){
            if(left.val < right .val){
                head.next = left;
                left = left.next;
                 head = head.next;
            }else{
                head.next = right;
                right = right.next;
                 head = head.next;
            }
               
        }
        if(left == null) {head.next = right;}
        else{head.next = left;}
        
        return dummy.next;
    }
}
