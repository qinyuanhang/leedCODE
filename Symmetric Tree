Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3
But the following is not:
    1
   / \
  2   2
   \   \
   3    3
   
   
/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
 /**
 
 */
public class Solution {
    public boolean isSymmetric(TreeNode root) {
        TreeNode root2=root;//相当于弄了两棵树，一左一右 并且 一右一左都 满足条件才返回true
        return isMirror(root,root2);
    }
    
    public boolean isMirror(TreeNode root,TreeNode root2){
       
        
        if(root==null && root2==null) return true;
        
        if(root!=null && root2!=null){
            if(root.val==root2.val){
                return isMirror(root.left,root2.right) && isMirror(root.right,root2.left);//这里是并的关系
            }else{
                return false;
            }
        }
        return false;
    }
}   
