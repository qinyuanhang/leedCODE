//用stack 来做，
public class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        Stack<TreeNode> stack = new Stack<TreeNode>();
        List res = new ArrayList<Integer>();
        if(root == null)  return res;
        
        stack.push(root);
        
        while(!stack.empty()){
            TreeNode temp = stack.pop();
            res.add(temp.val);
            
            if(temp.right != null){
                stack.push(temp.right);
            }
            if(temp.left != null){
                stack.push(temp.left);
            }
        }            
        
        return res;
    }
}
//用递归来做
public class Solution {
      List<Integer> res = new ArrayList<Integer>();//这个放外面
    public List<Integer> preorderTraversal(TreeNode root) {
   
     
     if(root == null)  return res;
     
     res.add(root.val);
     preorderTraversal(root.left);
     preorderTraversal(root.right);
     
     return res;
     
    }
}

//用dq来做
public class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List res = new ArrayList<Integer>();//注意这里的list是父类，
        
        if(root == null) return res;
        
        
        List left = preorderTraversal(root.left);
        List right = preorderTraversal(root.right);
         
        res.add(root.val);
        res.addAll(left);
        res.addAll(right);
         return res;
        
    }
}
