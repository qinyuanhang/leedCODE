Search a 2D Matrix
Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:

Integers in each row are sorted from left to right.
The first integer of each row is greater than the last integer of the previous row.
For example,

Consider the following matrix:

[
  [1,   3,  5,  7],
  [10, 11, 16, 20],
  [23, 30, 34, 50]
]
Given target = 3, return true.


就是先竖着一次二分法，找到要找的行之后，在对该行再一次二分法
找到行的方法 if(matrix[head][col] >= target) row = head;
因为竖着的二分法最后找到两行，比较第一行的最后一个，要是比target小，那么要找的数字只可能在第二行，


public class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int row = matrix.length - 1;
        int col = matrix[0].length - 1;
        int head = 0;
        int mid = head + (row - head) / 2;
        
         
        if (row + 1 == 0 && col + 1 == 0) return false;
        
       
        
        while(head + 1 < row){
            if(matrix[mid][0] == target){
                return true;
            }else if(matrix[mid][0] < target){
                head = mid;
            }else{
                row = mid;
            }
            mid = head + (row - head) / 2;
        }
        
        if(matrix[head][col] >= target) row = head;
       
       
       head = 0;
       mid = head + (col - head) / 2;
       
       while(head + 1 < col){
            if(matrix[row][mid] == target){
                return true;
            }else if(matrix[row][mid] < target){
                head = mid;
            }else{
                col = mid;
            }
            mid = head + (col - head) / 2;
        }
        
        if(matrix[row][head] == target || matrix[row][col] == target) return true;
        
        return false;
        
    }
}
