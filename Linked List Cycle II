Given a linked list, return the node where the cycle begins. If there is no cycle, return null.

Follow up:
Can you solve it without using extra space?

用找环的方法先找到快慢指针相遇，一旦相遇马上把快的指针放回头部，这时候把他们的速度变成一样，第二次他们再相遇，
这个点就是
相交点

public class Solution {
    public ListNode detectCycle(ListNode head) {
        
        ListNode fast = head;
        ListNode slow = head;
        
        while(true){
            
            if(fast == null || fast.next == null) return null;
            
            fast = fast.next.next;
            slow = slow.next;
            
            if(slow == fast) {
               break;
            }
        }
        
         slow = head;    //slow从头开始走，
    while (slow != fast) {    //二者相遇在Y点，则退出
        slow = slow.next;
        fast = fast.next;
    }
    return slow;

    }
}
